# GENERATED FILE DO NOT EDIT
name: ci
"on":
  pull_request: {}
  push:
    branches:
    - staging
    - trying
    - master
jobs:
  cpp-lint:
    name: cpp-lint
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
    - name: Fetch sources
      uses: actions/checkout@v2
    - name: Install dependencies
      run: sudo apt-get install -y clang-tools
    - name: Prepare report directory
      run: mkdir analyzer-report
    - name: Configure jtl
      run: cmake -S jtl -B jtl/cmake-build -DCMAKE_EXPORT_COMPILE_COMMANDS=On
    - name: Lint jtl
      run: scan-build -o analyzer-report make -C jtl/cmake-build -j4
    - name: Check that report is empty
      run: '[ -z "$(ls -A analyzer-report)" ]'
  misspell:
    runs-on: ubuntu-20.04
    timeout-minutes: 2
    steps:
    - name: Fetch sources
      uses: actions/checkout@v2
    - name: run spellcheck
      uses: reviewdog/action-misspell@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        locale: US
  rust-cargo-deny:
    name: rust-cargo-deny
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
    - name: Fetch sources
      uses: actions/checkout@v2
    - name: Run cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check all
  rust-lint:
    name: rust-lint
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
    - name: Fetch sources
      uses: actions/checkout@v2
    - name: Run clippy
      uses: actions-rs/cargo@v1
      with:
        args: --workspace -- -Dwarnings
        command: clippy
  rust-unit-tests:
    name: rust-unit-tests
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
    - name: Fetch sources
      uses: actions/checkout@v2
    - name: Setup cache
      uses: Swatinem/rust-cache@v1
    - name: Run unit tests
      uses: actions-rs/cargo@v1
      with:
        command: test
  rust-unused-deps:
    name: rust-unused-deps
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
    - name: Fetch sources
      uses: actions/checkout@v2
    - name: Install nightly toolchain
      uses: actions-rs/toolchain@v1
      with:
        components: clippy,rustfmt
        override: "true"
        toolchain: nightly
    - name: Setup cache
      uses: Swatinem/rust-cache@v1
    - id: cargo_udeps
      name: Fetch prebuilt cargo-udeps
      uses: actions/cache@v2
      with:
        key: udeps-bin-${{ runner.os }}-v0.1.20
        path: ~/udeps
    - name: Install cargo-udeps
      if: steps.cache_udeps.outputs.cache-hit != 'true'
      run: |2-

        cargo install cargo-udeps --locked --version 0.1.20
        mkdir -p ~/udeps
        cp $( which cargo-udeps ) ~/udeps
    - name: Run cargo-udeps
      run: "\nexport PATH=~/udeps:$PATH  \ncargo udeps \n"
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
    - name: Fetch sources
      uses: actions/checkout@v2
    - name: Install nightly toolchain
      uses: actions-rs/toolchain@v1
      with:
        components: clippy,rustfmt
        override: "true"
        toolchain: nightly
    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        args: -- --check
        command: fmt
